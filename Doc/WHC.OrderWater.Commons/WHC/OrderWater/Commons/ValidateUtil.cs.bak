namespace WHC.OrderWater.Commons
{
    using System;
    using System.Text;
    using System.Text.RegularExpressions;

    public class ValidateUtil
    {
        public static readonly string DecimalRegex = "^[0-9]+[.]?[0-9]+$";
        public static readonly string DecimalSignRegex = "^[+-]?[0-9]+[.]?[0-9]+$";
        public static readonly string EmailRegex = @"^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,6})$";
        public static readonly string GuidRegex = "[A-F0-9]{8}(-[A-F0-9]{4}){3}-[A-F0-9]{12}|[A-F0-9]{32}";
        public static readonly string IPRegex = @"^((2[0-4]\d|25[0-5]|[01]?\d\d?)\.){3}(2[0-4]\d|25[0-5]|[01]?\d\d?)$";
        public static readonly string LetterRegex = "^[A-Za-z]+$";
        public static readonly string MobileRegex = @"^(13|15|18)\d{9}$";
        public static readonly string NumberRegex = "^[0-9]+$";
        public static readonly string NumberSignRegex = "^[+-]?[0-9]+$";
        public static readonly string NumericRegex = @"^[-]?\d+[.]?\d*$";
        public static readonly string PasswordCharNumberRegex = "^[A-Za-z_0-9]{6,16}$";
        public static readonly string PasswordRegex = @"^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?!.*\s).{6,16}$";
        public static readonly string PhoneMobileRegex = @"^(\(\d{3,4}\)|\d{3,4}-)?\d{7,8}$|^(13|15|18)\d{9}$";
        public static readonly string PhoneRegex = @"^(\(\d{3,4}\)|\d{3,4}-)?\d{7,8}$";
        public static readonly string CHZN = "[一-龥]";
        public static readonly string IDCard15 = @"^[1-9]\d{7}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}$";
        public static readonly string IDCard18 = @"^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])((\d{4})|\d{3}[A-Z])$";
        public static readonly string string_3 = @"[A-Za-z0-9\+\/\=]";
        public static readonly string UrlRegex = @"\b(https?|ftp|file)://[-A-Za-z0-9+&@#/%?=~_|!:,.;]*[-A-Za-z0-9+&@#/%=~_|]";
        public static readonly string UserNameRegex = @"^([\u4e00-\u9fa5A-Za-z_0-9]{0,})$";
        public static readonly string ValidIntRegex = @"^[1-9]\d*\.?[0]*$";

        public static string CheckMathLength(string inputData, int maxLength)
        {
            if ((inputData != null) && (inputData != string.Empty))
            {
                inputData = inputData.Trim();
                if (inputData.Length > maxLength)
                {
                    inputData = inputData.Substring(0, maxLength);
                }
            }
            return inputData;
        }

        public static string Decode(string str)
        {
            str = str.Replace("<br>", "\n");
            str = str.Replace("&gt;", ">");
            str = str.Replace("&lt;", "<");
            str = str.Replace("&nbsp;", " ");
            str = str.Replace("&quot;", "\"");
            return str;
        }

        public static string Encode(string str)
        {
            str = str.Replace("&", "&amp;");
            str = str.Replace("'", "''");
            str = str.Replace("\"", "&quot;");
            str = str.Replace(" ", "&nbsp;");
            str = str.Replace("<", "&lt;");
            str = str.Replace(">", "&gt;");
            str = str.Replace("\n", "<br>");
            return str;
        }

        public static int GetCHZNLength(string inputData)
        {
            byte[] bytes = new ASCIIEncoding().GetBytes(inputData);
            int num = 0;
            for (int i = 0; i <= (bytes.Length - 1); i++)
            {
                if (bytes[i] == 0x3f)
                {
                    num++;
                }
                num++;
            }
            return num;
        }

        public static int GetStringLength(string stringValue)
        {
            return Encoding.Default.GetBytes(stringValue).Length;
        }

        public static bool IsBase64String(string str)
        {
            return Regex.IsMatch(str, string_3);
        }

        public static bool IsDate(string strValue)
        {
            return Regex.IsMatch(strValue, @"^((\d{2}(([02468][048])|([13579][26]))[\-\/\s]?((((0?[13578])|(1[02]))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\-\/\s]?((0?[1-9])|([1-2][0-9])))))|(\d{2}(([02468][1235679])|([13579][01345789]))[\-\/\s]?((((0?[13578])|(1[02]))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\-\/\s]?((0?[1-9])|(1[0-9])|(2[0-8]))))))");
        }

        public static bool IsDateHourMinute(string strValue)
        {
            return Regex.IsMatch(strValue, @"^(19[0-9]{2}|[2-9][0-9]{3})-((0(1|3|5|7|8)|10|12)-(0[1-9]|1[0-9]|2[0-9]|3[0-1])|(0(4|6|9)|11)-(0[1-9]|1[0-9]|2[0-9]|30)|(02)-(0[1-9]|1[0-9]|2[0-9]))\x20(0[0-9]|1[0-9]|2[0-3])(:[0-5][0-9]){1}$");
        }

        public static bool IsDecimal(string inputData)
        {
            Regex regex = new Regex(DecimalRegex);
            return regex.Match(inputData).Success;
        }

        public static bool IsDecimalSign(string inputData)
        {
            Regex regex = new Regex(DecimalSignRegex);
            return regex.Match(inputData).Success;
        }

        public static bool IsEmail(string inputData)
        {
            Regex regex = new Regex(EmailRegex);
            return regex.Match(inputData).Success;
        }

        public static bool IsGuid(string guid)
        {
            if (string.IsNullOrEmpty(guid))
            {
                return false;
            }
            return Regex.IsMatch(guid, GuidRegex, RegexOptions.IgnoreCase);
        }

        public static bool IsIDCard15(string inputData)
        {
            if (string.IsNullOrEmpty(inputData))
            {
                return false;
            }
            if (inputData.Length == 15)
            {
                return Regex.IsMatch(inputData, IDCard15);
            }
            return ((inputData.Length == 0x12) && Regex.IsMatch(inputData, IDCard18, RegexOptions.IgnoreCase));
        }

        public bool IsLetter(string inputData)
        {
            return Regex.IsMatch(inputData, LetterRegex);
        }

        public static bool IsMatch(string input, string pattern)
        {
            return IsMatch(input, pattern, RegexOptions.IgnoreCase);
        }

        public static bool IsMatch(string input, string pattern, RegexOptions options)
        {
            return Regex.IsMatch(input, pattern, options);
        }

        public static bool IsNumber(string inputData)
        {
            Regex regex = new Regex(NumberRegex);
            return regex.Match(inputData).Success;
        }

        public static bool IsNumberSign(string inputData)
        {
            Regex regex = new Regex(NumberSignRegex);
            return regex.Match(inputData).Success;
        }

        public static bool IsNumeric(string inputData)
        {
            Regex regex = new Regex(NumericRegex);
            return regex.Match(inputData).Success;
        }

        public static bool IsValidDomain(string host)
        {
            Regex regex = new Regex(@"^\d+$");
            if (host.IndexOf(".") == -1)
            {
                return false;
            }
            return !regex.IsMatch(host.Replace(".", string.Empty));
        }

        public static bool IsValidInt(string val)
        {
            return Regex.IsMatch(val, ValidIntRegex);
        }

        public static bool IsValidIP(string ip)
        {
            return Regex.IsMatch(ip, IPRegex);
        }

        public static bool IsValidMobile(string mobile)
        {
            Regex regex = new Regex(MobileRegex, RegexOptions.None);
            return regex.Match(mobile).Success;
        }

        public static bool IsValidPassword(string password)
        {
            return Regex.IsMatch(password, PasswordRegex);
        }

        public static bool IsValidPhone(string phone)
        {
            Regex regex = new Regex(PhoneRegex, RegexOptions.None);
            return regex.Match(phone).Success;
        }

        public static bool IsValidPhoneAndMobile(string number)
        {
            Regex regex = new Regex(PhoneMobileRegex, RegexOptions.None);
            return regex.Match(number).Success;
        }

        public static bool IsValidUserName(string userName)
        {
            int stringLength = GetStringLength(userName);
            return (((stringLength >= 4) && (stringLength <= 20)) && Regex.IsMatch(userName, UserNameRegex));
        }

        public static bool IsValidZip(string zip)
        {
            Regex regex = new Regex(@"^\d{6}$", RegexOptions.None);
            return regex.Match(zip).Success;
        }

        public static bool IsValidCHZN(string inputData)
        {
            Regex regex = new Regex(CHZN);
            return regex.Match(inputData).Success;
        }

        public static bool IsValidURL(string url)
        {
            return Regex.IsMatch(url, UrlRegex);
        }
    }
}

